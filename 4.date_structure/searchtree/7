/*************************************************************************
	> File Name: 27.binary_search_tree.cpp
	> Author: ldc
	> Mail: litesla
	> Created Time: 2019年01月20日 星期日 18时55分06秒
 ************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Node{
    int key;
    struct Node *lchild, *rchild;
}Node;


Node *getNewNode(int key) {
    Node *p = (Node *)calloc(sizeof(Node), 1);
    p->key = key;
    return p;
}
Node *insert(Node *root, int key) {
    if (root == NULL) return getNewNode(key);
    if (root->key == key) return root;
    if (root->key > key) root->lchild = insert(root->lchild,key);
    else root->rchild = insert(root->rchild, key);
    return root;
}

Node *earse(Node *root, int key) {
    if (root == NULL) return root;
    if (root->key < key) {
        root->rchild = earse(root->rchild, key);
    } else if (root->key > key) {
        root->lchild = earse(root->lchild, key);
    } else {
        if (root->lchild == NULL && root->rchild == NULL) {
            free(root);
            return NULL;
        } else if (root->lchild == NULL || root->rchild == NULL){
            Node *temp = (root->lchild ? root->lchild : root->rchild);
            free(root);//返回儿子
            return temp;
        } else {
            Node *temp = predeccessor()
        }
    }
}



void clear(Node *node) {
    if (node == NULL) return ;
    clear(node->lchild);
    clear(node->rchild);
    free(node);
    return ;
}


int main() {
    return 0;
}
